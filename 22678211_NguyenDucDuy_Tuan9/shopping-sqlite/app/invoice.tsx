import { View, Text, ScrollView, StyleSheet, Button, Alert } from "react-native";
import { useEffect, useState } from "react";
import { getCart } from "../src/db/cart.repo";      // H√†m l·∫•y gi·ªè h√†ng hi·ªán t·∫°i t·ª´ CSDL (SQLite)
import { checkout } from '../src/db/order.repo';     // H√†m x·ª≠ l√Ω thanh to√°n, t·∫°o h√≥a ƒë∆°n

// COMPONENT CH√çNH
export default function InvoiceScreen() {
  // State l∆∞u danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  const [items, setItems] = useState<any[]>([]);
  // State l∆∞u t·ªïng ti·ªÅn (ch∆∞a VAT)
  const [total, setTotal] = useState(0);
  // useEffect ch·∫°y khi m·ªü m√†n h√¨nh
  useEffect(() => {
    const cart = getCart(); // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ DB
    setItems(cart);         // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
    setTotal(
      Number(cart.reduce((s: number, i: any) => s + i.qty * i.price, 0))
    ); // T√≠nh t·ªïng ti·ªÅn
  }, []);

  // H√†m l√†m m·ªõi l·∫°i d·ªØ li·ªáu gi·ªè h√†ng (sau khi thanh to√°n xong)
  const refresh = async () => {
    const rows = await getCart();
    setItems(rows);
    setTotal(rows.reduce((acc, r) => acc + r.qty * r.price, 0));
  };

  // T√≠nh VAT (10%)
  const VAT = total * 0.1;

  // X·ª≠ l√Ω n√∫t "Thanh to√°n"
  const handleCheckout = async () => {
    const ok = await checkout(); // G·ªçi h√†m thanh to√°n trong DB

    if (ok) {
      // N·∫øu thanh to√°n th√†nh c√¥ng
      Alert.alert('Thanh to√°n th√†nh c√¥ng', 'C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!', [
        { text: 'OK', onPress: () => refresh() }, // Sau khi b·∫•m OK, l√†m m·ªõi gi·ªè h√†ng
      ]);
    } else {
      // N·∫øu gi·ªè h√†ng tr·ªëng
      Alert.alert('Gi·ªè h√†ng tr·ªëng', 'Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n.');
    }
  };

  // GIAO DI·ªÜN HI·ªÇN TH·ªä H√ìA ƒê∆†N
  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>H√≥a ƒë∆°n</Text>

      {/* Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m trong gi·ªè */}
      {items.map((i, idx) => (
        <View key={idx} style={styles.itemRow}>
          <Text style={styles.itemName}>
            {i.name} x {i.qty}
          </Text>
          <Text style={styles.itemPrice}>
            {(i.qty * i.price).toLocaleString()}ƒë
          </Text>
        </View>
      ))}

      <View style={styles.separator} />

      {/* Ph·∫ßn t·ªïng k·∫øt h√≥a ƒë∆°n */}
      <View style={styles.summaryRow}>
        <Text style={styles.summaryLabel}>T·ªïng:</Text>
        <Text style={styles.summaryValue}>{total.toLocaleString()}ƒë</Text>
      </View>

      <View style={styles.summaryRow}>
        <Text style={styles.summaryLabel}>VAT (10%):</Text>
        <Text style={styles.summaryValue}>{VAT.toLocaleString()}ƒë</Text>
      </View>

      <View style={[styles.summaryRow, styles.totalRow]}>
        <Text style={[styles.summaryLabel, styles.totalLabel]}>
          Th√†nh ti·ªÅn:
        </Text>
        <Text style={[styles.summaryValue, styles.totalValue]}>
          {(total + VAT).toLocaleString()}ƒë
        </Text>
      </View>

      {/* N√∫t thanh to√°n */}
      <View style={{ marginTop: 30 }}>
        <Button
          title="üí≥ Thanh to√°n"
          onPress={handleCheckout}
          color="#007AFF"
        />
      </View>

      {/* Ng√†y gi·ªù in h√≥a ƒë∆°n */}
      <Text style={styles.date}>Ng√†y: {new Date().toLocaleString()}</Text>
    </ScrollView>
  );
}
// STYLE CHO GIAO DI·ªÜN
const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: "#fff",
  },
  title: {
    fontWeight: "bold",
    fontSize: 22,
    marginBottom: 15,
  },
  itemRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 8,
  },
  itemName: {
    fontSize: 16,
  },
  itemPrice: {
    fontSize: 16,
  },
  separator: {
    height: 1,
    backgroundColor: "#ddd",
    marginVertical: 15,
  },
  summaryRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 6,
  },
  summaryLabel: {
    fontSize: 18,
  },
  summaryValue: {
    fontSize: 18,
  },
  totalRow: {
    marginTop: 10,
    borderTopWidth: 1,
    borderTopColor: "#000",
    paddingTop: 10,
  },
  totalLabel: {
    fontWeight: "bold",
    fontSize: 20,
  },
  totalValue: {
    fontWeight: "bold",
    fontSize: 20,
  },
  date: {
    marginTop: 20,
    fontStyle: "italic",
    fontSize: 14,
    textAlign: "right",
    color: "#555",
  },
});
