import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
} from "react-native";
import { useEffect, useState } from "react";
import { getAllOrders, getOrderDetails } from "../src/db/order.repo";
import { Order, OrderItem } from "../src/models/types";

// COMPONENT CH√çNH - L·ªäCH S·ª¨ H√ìA ƒê∆†N
export default function HistoryScreen() {
  // State l∆∞u danh s√°ch ƒë∆°n h√†ng
  const [orders, setOrders] = useState<Order[]>([]);
  // State l∆∞u ƒë∆°n h√†ng ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ xem chi ti·∫øt
  const [selectedOrder, setSelectedOrder] = useState<number | null>(null);
  // State l∆∞u chi ti·∫øt s·∫£n ph·∫©m c·ªßa ƒë∆°n h√†ng
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);
  // State loading
  const [loading, setLoading] = useState(true);

  // Load danh s√°ch ƒë∆°n h√†ng khi m√†n h√¨nh ƒë∆∞·ª£c m·ªü
  useEffect(() => {
    loadOrders();
  }, []);

  // H√†m t·∫£i danh s√°ch ƒë∆°n h√†ng t·ª´ database
  const loadOrders = async () => {
    setLoading(true);
    try {
      const data = await getAllOrders();
      setOrders(data);
    } catch (error) {
      console.error("L·ªói khi t·∫£i ƒë∆°n h√†ng:", error);
    } finally {
      setLoading(false);
    }
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n v√†o m·ªôt ƒë∆°n h√†ng ƒë·ªÉ xem chi ti·∫øt
  const handleOrderPress = async (orderId: number) => {
    if (selectedOrder === orderId) {
      // N·∫øu ƒëang m·ªü th√¨ ƒë√≥ng l·∫°i
      setSelectedOrder(null);
      setOrderItems([]);
    } else {
      // M·ªü chi ti·∫øt ƒë∆°n h√†ng
      setSelectedOrder(orderId);
      const items = await getOrderDetails(orderId);
      setOrderItems(items);
    }
  };

  // ƒê·ªãnh d·∫°ng ng√†y gi·ªù
  const formatDate = (isoDate: string) => {
    const date = new Date(isoDate);
    return date.toLocaleString("vi-VN", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  // N·∫øu ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <View style={styles.centerContainer}>
        <ActivityIndicator size="large" color="#007AFF" />
        <Text style={styles.loadingText}>ƒêang t·∫£i l·ªãch s·ª≠...</Text>
      </View>
    );
  }

  // N·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o
  if (orders.length === 0) {
    return (
      <View style={styles.centerContainer}>
        <Text style={styles.emptyText}>üìã</Text>
        <Text style={styles.emptySubText}>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</Text>
      </View>
    );
  }

  // GIAO DI·ªÜN HI·ªÇN TH·ªä L·ªäCH S·ª¨ ƒê∆†N H√ÄNG
  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>L·ªãch s·ª≠ h√≥a ƒë∆°n</Text>
      <Text style={styles.subtitle}>T·ªïng: {orders.length} ƒë∆°n h√†ng</Text>

      {orders.map((order) => (
        <View key={order.order_id} style={styles.orderCard}>
          {/* Ph·∫ßn t√≥m t·∫Øt ƒë∆°n h√†ng - c√≥ th·ªÉ nh·∫•n ƒë·ªÉ xem chi ti·∫øt */}
          <TouchableOpacity
            style={styles.orderHeader}
            onPress={() => handleOrderPress(order.order_id)}
          >
            <View style={styles.orderHeaderLeft}>
              <Text style={styles.orderId}>
                ƒê∆°n h√†ng #{order.order_id}
              </Text>
              <Text style={styles.orderDate}>
                {formatDate(order.order_date)}
              </Text>
            </View>
            <View style={styles.orderHeaderRight}>
              <Text style={styles.orderTotal}>
                {order.total.toLocaleString()}ƒë
              </Text>
              <Text style={styles.expandIcon}>
                {selectedOrder === order.order_id ? "‚ñº" : "‚ñ∂"}
              </Text>
            </View>
          </TouchableOpacity>

          {/* Chi ti·∫øt ƒë∆°n h√†ng - ch·ªâ hi·ªán khi ƒë∆∞·ª£c ch·ªçn */}
          {selectedOrder === order.order_id && (
            <View style={styles.orderDetails}>
              <View style={styles.detailsSeparator} />
              <Text style={styles.detailsTitle}>Chi ti·∫øt s·∫£n ph·∫©m:</Text>

              {orderItems.map((item) => (
                <View key={item.id} style={styles.itemRow}>
                  <View style={styles.itemLeft}>
                    <Text style={styles.itemName}>{item.name}</Text>
                    <Text style={styles.itemQty}>
                      SL: {item.qty} x {item.price.toLocaleString()}ƒë
                    </Text>
                  </View>
                  <Text style={styles.itemTotal}>
                    {(item.qty * item.price).toLocaleString()}ƒë
                  </Text>
                </View>
              ))}

              <View style={styles.detailsSeparator} />

              {/* T·ªïng k·∫øt h√≥a ƒë∆°n */}
              <View style={styles.summaryRow}>
                <Text style={styles.summaryLabel}>T·ªïng ti·ªÅn h√†ng:</Text>
                <Text style={styles.summaryValue}>
                  {order.total.toLocaleString()}ƒë
                </Text>
              </View>

              <View style={styles.summaryRow}>
                <Text style={styles.summaryLabel}>VAT (10%):</Text>
                <Text style={styles.summaryValue}>
                  {(order.total * 0.1).toLocaleString()}ƒë
                </Text>
              </View>

              <View style={[styles.summaryRow, styles.totalRow]}>
                <Text style={styles.totalLabel}>Th√†nh ti·ªÅn:</Text>
                <Text style={styles.totalValue}>
                  {(order.total * 1.1).toLocaleString()}ƒë
                </Text>
              </View>
            </View>
          )}
        </View>
      ))}
    </ScrollView>
  );
}

// STYLE CHO GIAO DI·ªÜN
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
    padding: 15,
  },
  centerContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#f5f5f5",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 5,
    color: "#333",
  },
  subtitle: {
    fontSize: 14,
    color: "#666",
    marginBottom: 15,
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: "#666",
  },
  emptyText: {
    fontSize: 60,
    marginBottom: 10,
  },
  emptySubText: {
    fontSize: 18,
    color: "#999",
  },
  orderCard: {
    backgroundColor: "#fff",
    borderRadius: 10,
    marginBottom: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  orderHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 15,
  },
  orderHeaderLeft: {
    flex: 1,
  },
  orderId: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#007AFF",
    marginBottom: 4,
  },
  orderDate: {
    fontSize: 13,
    color: "#666",
  },
  orderHeaderRight: {
    flexDirection: "row",
    alignItems: "center",
    gap: 10,
  },
  orderTotal: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#28a745",
  },
  expandIcon: {
    fontSize: 12,
    color: "#999",
  },
  orderDetails: {
    paddingHorizontal: 15,
    paddingBottom: 15,
  },
  detailsSeparator: {
    height: 1,
    backgroundColor: "#e0e0e0",
    marginVertical: 12,
  },
  detailsTitle: {
    fontSize: 14,
    fontWeight: "600",
    color: "#333",
    marginBottom: 10,
  },
  itemRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 10,
    paddingVertical: 5,
  },
  itemLeft: {
    flex: 1,
  },
  itemName: {
    fontSize: 15,
    color: "#333",
    marginBottom: 2,
  },
  itemQty: {
    fontSize: 13,
    color: "#666",
  },
  itemTotal: {
    fontSize: 15,
    fontWeight: "600",
    color: "#333",
  },
  summaryRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 6,
  },
  summaryLabel: {
    fontSize: 15,
    color: "#555",
  },
  summaryValue: {
    fontSize: 15,
    color: "#555",
  },
  totalRow: {
    marginTop: 8,
    paddingTop: 8,
    borderTopWidth: 1,
    borderTopColor: "#333",
  },
  totalLabel: {
    fontSize: 17,
    fontWeight: "bold",
    color: "#333",
  },
  totalValue: {
    fontSize: 17,
    fontWeight: "bold",
    color: "#28a745",
  },
});
